<?php

/**
 * @file
 * USWDS Paragraphs module code.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_theme().
 */
function uswds_paragraphs_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__uswds_hero' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__uswds_graphic_list' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__uswds_media_block' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__uswds_accordion' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__uswds_accordion_item' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__uswds_grid' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__uswds_column' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__uswds_text' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_preprocess_paragraph().
 */
function uswds_paragraphs_preprocess_paragraph(&$variables) {
  // Always set the USWDS-specific "uswds_grid_class" variable.
  if (!isset($variables['uswds_grid_class'])) {
    $variables['uswds_grid_class'] = FALSE;
  }
}

/**
 * Helper function to convert a fraction into a USWDS class.
 *
 * @param int $numerator
 *   The top part of the fraction.
 *
 * @param int $denominator
 *   The bottom part of the fraction.
 */
function _uswds_paragraphs_fraction_to_class($numerator, $denominator) {
  if ($numerator == $denominator) {
    return 'usa-width-one-whole';
  }
  // We could do a lot of fancy math here. But we won't.
  $classes = [
    // Denominators first.
    2 => [
      // Then numerators.
      1 => 'usa-width-one-half',
    ],
    3 => [
      1 => 'usa-width-one-third',
      2 => 'usa-width-two-thirds',
    ],
    4 => [
      1 => 'usa-width-one-fourth',
      2 => 'usa-width-one-half',
      3 => 'usa-width-three-fourths',
    ],
    6 => [
      1 => 'usa-width-one-sixth',
      2 => 'usa-width-one-third',
      3 => 'usa-width-one-half',
      4 => 'usa-width-two-thirds',
      5 => 'usa-width-five-sixths',
    ],
    12 => [
      1 => 'usa-width-one-twelfth',
      2 => 'usa-width-one-sixth',
      3 => 'usa-width-one-fourth',
      4 => 'usa-width-one-third',
      5 => 'usa-width-five-twelfths',
      6 => 'usa-width-one-half',
      7 => 'usa-width-seven-twelfths',
      8 => 'usa-width-two-thirds',
      9 => 'usa-width-three-fourths',
      10 => 'usa-width-five-sixths',
      11 => 'usa-width-eleven-twelfths',
    ],
  ];
  if (!empty($classes[$denominator][$numerator])) {
    return $classes[$denominator][$numerator];
  }
  // If still here, it is some weird non-supported fraction.
  return 'usa-width-one-whole';
}

/**
 * Implements hook_preprocess_paragraph__uswds_text().
 */
function uswds_paragraphs_preprocess_paragraph__uswds_text(&$variables) {
  $parent = $variables['paragraph']->getParentEntity();
  if ($parent && 'paragraph' != $parent->getEntityTypeId()) {
    // If this text paragraph is not in an entity, we'll need
    // to add the grid class.
    $variables['uswds_grid_class'] = 'usa-grid-full';
  }
}

/**
 * Implements hook_preprocess_paragraph__uswds_grid().
 */
function uswds_paragraphs_preprocess_paragraph__uswds_grid(&$variables) {
  $variables['uswds_grid_class'] = 'usa-grid-full';
  $grid = $variables['paragraph'];
  $max_columns = (int)$grid->field_uswds_grid_column_width->value;
  $columns = $grid->field_uswds_paragraphs->referencedEntities();
  $num_columns = count($columns);

  // Drop excess columns.
  if ($num_columns > $max_columns) {
    for ($key = $max_columns; $key < $num_columns; $key++) {
      unset($variables['content']['field_uswds_paragraphs'][$key]);
    }
    $num_columns = $max_columns;
  }

  $stretch = (int)$grid->field_uswds_grid_column_stretch->value;
  $available_space = $max_columns - $num_columns;
  for ($key = 0; $key < $num_columns; $key++) {

    // The numerator is normally 1.
    $numerator = 1;
    // But one column is allowed to stretch if configured to do so.
    if ($stretch && $stretch == $key + 1) {
      $numerator += $available_space;
    }
    // Finally communicate the class.
    $class = _uswds_paragraphs_fraction_to_class($numerator, $max_columns);
    $variables['content']['field_uswds_paragraphs'][$key]['#uswds_width_class'] = $class;
  }
}

/**
 * Implements hook_preprocess_paragraph__column().
 */
function uswds_paragraphs_preprocess_paragraph__uswds_column(&$variables) {
  if (empty($variables['elements']['#uswds_width_class'])) {
    $variables['elements']['#uswds_width_class'] = 'usa-width-one-whole';
  }
  $width_class = $variables['elements']['#uswds_width_class'];
  $variables['attributes']['class'][] = $width_class;
}

/**
 * Implements hook_preprocess_paragraph__uswds_hero().
 */
function uswds_paragraphs_preprocess_paragraph__uswds_hero(&$variables) {
  // The "uswds_hero" Paragraph type should always be on the grid.
  $variables['uswds_grid_class'] = 'usa-grid';
  // We also need to set the inline CSS for the image.
  if (!$variables['paragraph']->field_uswds_image->isEmpty()) {
    // Make sure we have a unique ID, in case of multiple Heroes.
    $identifier = 'uswds-hero-' . $variables['paragraph']->field_uswds_image->entity->id();
    $variables['attributes']['class'][] = $identifier;
    // Inline the CSS background image.
    $img = $variables['paragraph']->field_uswds_image->entity->url();
    $css = ".$identifier.paragraph--type--uswds-hero.usa-hero { background-image:url($img); }";
    $variables['#attached']['html_head'][] = [
      [
        '#tag' => 'style',
        '#value' => $css,
      ],
      'uswds-hero'
    ];
  }
}

/**
 * Implements hook_preprocess_paragraph__uswds_hero().
 */
function uswds_paragraphs_preprocess_paragraph__uswds_media_block(&$variables) {
  // We need to set the media_block class here, because we side-step the field
  // template in paragraph--uswds-media-block.html.twig.
  $variables['content']['field_uswds_image'][0]['#item_attributes']['class'][] = 'usa-media_block-img';
}

/**
 * Implements hook_preprocess_paragraph__uswds_graphic_list().
 */
function uswds_paragraphs_preprocess_paragraph__uswds_graphic_list(&$variables) {

  // Set the grid always.
  $variables['uswds_grid_class'] = 'usa-grid-full';

  // Here we split the media blocks into pairs.
  $pairs = [];
  $pair = [];
  $media_block_keys = Element::children($variables['content']['field_uswds_paragraphs'], TRUE);
  foreach ($media_block_keys as $key) {
    if (count($pair) < 2) {
      $pair[] = $variables['content']['field_uswds_paragraphs'][$key];
    }
    if (count($pair) == 2) {
      $pairs[] = $pair;
      $pair = [];
    }
  }
  // Catch any stragglers.
  if (!empty($pair)) {
    $pairs[] = $pair;
  }
  $variables['graphic_list_rows'] = $pairs;
}

/**
 * Implements hook_preprocess_paragraph__uswds_accordion().
 */
function uswds_paragraphs_preprocess_paragraph__uswds_accordion(&$variables) {

  $accordion = $variables['paragraph'];

  if ($accordion->field_uswds_accordion_multi->value) {
    $variables['attributes']['aria-multiselectable'] = 'true';
  }

  if ($accordion->field_uswds_accordion_bordered->value) {
    $variables['attributes']['class'][] = 'usa-accordion-bordered';
  }
  else {
    $variables['attributes']['class'][] = 'usa-accordion';
  }

  if ($accordion->field_uswds_accordion_expand->value) {
    $variables['content']['field_uswds_paragraphs'][0]['#uswds_expand'] = TRUE;
  }
}

/**
 * Implements hook_preprocess_paragraph__uswds_accordion_item().
 */
function uswds_paragraphs_preprocess_paragraph__uswds_accordion_item(&$variables) {
  $expanded = (!empty($variables['elements']['#uswds_expand']));
  $variables['expanded'] = ($expanded) ? 'true' : 'false';

  $controls = 'uswds-paragraph-' . $variables['paragraph']->id();
  $variables['controls'] = $controls;
}

/**
 * Implements hook_preprocess_field__paragraph__field_uswds_link__uswds_hero().
 */
function uswds_paragraphs_preprocess_field__paragraph__field_uswds_link__uswds_hero(&$variables) {
  $classes['class'][] = 'usa-hero-link';
  $variables['items'][0]['content']['#url']->setOption('attributes', $classes);
}

/**
 * Implements hook_preprocess_field__paragraph__field_uswds_button__uswds_hero().
 */
function uswds_paragraphs_preprocess_field__paragraph__field_uswds_button__uswds_hero(&$variables) {
  $classes['class'] = ['usa-button', 'usa-button-big', 'usa-button-secondary'];
  $variables['items'][0]['content']['#url']->setOption('attributes', $classes);
}

/**
 * Helper function to get the required fields for each type.
 *
 * @return
 *   A nested array of bundles to required field names.
 */
function _uswds_paragraphs_get_required_fields() {
  return [
    'uswds_accordion' => [
      'field_uswds_accordion_expand',
      'field_uswds_accordion_multi',
      'field_uswds_accordion_bordered',
      'field_uswds_paragraphs',
    ],
    'uswds_accordion_item' => [
      'field_uswds_title',
    ],
    'uswds_graphic_list' => [
      'field_uswds_paragraphs',
    ],
    'uswds_grid' => [
      'field_uswds_grid_column_width',
      'field_uswds_grid_column_stretch',
      'field_uswds_paragraphs',
    ],
    'uswds_hero' => [
      'field_uswds_image',
      'field_uswds_title',
      'field_uswds_link',
      'field_uswds_button',
    ],
    'uswds_media_block' => [
      'field_uswds_title',
      'field_uswds_image',
      'field_uswds_body',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function uswds_paragraphs_form_field_config_delete_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $entity = $form_state->getFormObject()->getEntity();
  $entity_type = $entity->get('entity_type');
  $bundle = $entity->get('bundle');
  $field_name = $entity->get('field_name');
  $required = _uswds_paragraphs_get_required_fields();

  if ('paragraph' != $entity_type) {
    return;
  }
  if (empty($required[$bundle])) {
    return;
  }
  if (!in_array($field_name, $required[$bundle])) {
    return;
  }
  $form['uswds_paragraphs']['#markup'] = t('NOTE: This field is required by USWDS Paragraphs, and cannot be deleted.');
  $form['actions']['submit']['#access'] = FALSE;
}
